<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>RB's blog</title>
  <link href="http://renard.github.com/o-blogindex.xml" rel="self" />
  <link href="http://renard.github.com/o-blog"/>
  <updated>2015-05-22T13:43:10Z</updated>
  <id>http://renard.github.com/o-blogindex.xml</id>
  <entry><title type="html">Adding an image into a post</title><author><name>nil</name></author><link href="http://renard.github.com/o-blog/tips/2012/08/21_adding-an-image-into-a-post.html"/><updated>2012-08-21T10:43:00Z</updated><published>2012-08-21T10:43:00Z</published><id>tips/2012/08/21_adding-an-image-into-a-post.html</id><category scheme="/tags/usage.html" term="usage" label="usage"/><category scheme="/tags/o-blog.html" term="o@blog" label="o@blog"/><content type="html">&lt;div class="row "&gt;&lt;div class="col-sm-8 "&gt;&lt;!-- ("8") --&gt;


&lt;p&gt;
Adding an image to a post is simple since &lt;a href="http://orgmode.org"&gt;Org-mode&lt;/a&gt; offers a special
link scheme for that. An image file can be stored anywhere in your
local directory structure with a valid path. During the export
process, the image file is copied into a folder related to the post,
and all exported links are corrected to point to its new location.
&lt;/p&gt;


&lt;div class="row "&gt;&lt;div class="col-sm-5 "&gt;&lt;!-- ("5") --&gt;


&lt;p&gt;
For example, the Org-mode markup of &lt;code&gt;file:emacs-logo.png&lt;/code&gt; surrounded
by &lt;a href="http://orgmode.org/org.html#Link-format"&gt;double square brackets&lt;/a&gt; will result (upon export/publishing) in
copying that image from its current location (in the same directory as
this sample.org file) to its target location of
&lt;code&gt;tips/2012/08/21_adding-an-image-into-a-post/emacs-logo.png&lt;/code&gt;.
&lt;/p&gt;

&lt;/div&gt;&lt;div class="col-sm-3 "&gt;&lt;!-- ("3") --&gt;


&lt;div class="org-src-container"&gt;

&lt;pre class="src src-org"&gt;,# NOTE: The link should be complete.
,&lt;span style="color: #D0BF8F; font-weight: bold; text-decoration: underline;"&gt;&lt;a href="file:emacs-logo.png"&gt;file:emacs-logo.png&lt;/a&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;


&lt;/div&gt;&lt;/div&gt;



&lt;/div&gt;&lt;div class="col-sm-4 "&gt;&lt;!-- ("4") --&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;a href="emacs-logo.png"&gt;&lt;img src="emacs-logo.png" alt="emacs-logo.png" /&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;/div&gt;&lt;/div&gt;



&lt;p&gt;
The exported HTML result will resemble:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-html"&gt;&amp;lt;&lt;span style="color: #93E0E3;"&gt;img&lt;/span&gt; &lt;span style="color: #DFAF8F;"&gt;src&lt;/span&gt;=&lt;span style="color: #CC9393;"&gt;"21_adding-an-image-into-a-post/emacs-logo.png"&lt;/span&gt;  &lt;span style="color: #DFAF8F;"&gt;alt&lt;/span&gt;=&lt;span style="color: #CC9393;"&gt;"21_adding-an-imag&lt;/span&gt;&lt;span style="color: #DC8CC3; background-color: #3F3F3F;"&gt;e-into-a-post/emacs-logo.png" /&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;



&lt;p&gt;
To keep files organized, you can place all files under a subfolder,
e.g. &lt;code&gt;media/&lt;/code&gt;. Then you can create a sub-folder for each post, such
as:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;/media/post1/file1&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/media/post1/file2&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/media/post2/file&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;etc.
&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><title type="html">Create static pages</title><author><name>nil</name></author><link href="http://renard.github.com/o-blog/tips/2012/05/21_create-static-pages.html"/><updated>2012-05-21T12:48:00Z</updated><published>2012-05-21T12:48:00Z</published><id>tips/2012/05/21_create-static-pages.html</id><category scheme="/tags/usage.html" term="usage" label="usage"/><category scheme="/tags/bootstrap.html" term="Bootstrap" label="Bootstrap"/><category scheme="/tags/o-blog.html" term="o@blog" label="o@blog"/><content type="html">&lt;div class="row "&gt;&lt;div class="col-sm-7 "&gt;&lt;!-- ("7") --&gt;



&lt;p&gt;
Static pages are create exactly like blog pages. The only thing you need to
add is a &lt;code&gt;PAGE&lt;/code&gt; property. The exported path is relative to &lt;code&gt;#+PUBLISH_DIR:&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
You can also specify a custom template for your static page by adding a
&lt;code&gt;TEMPLATE&lt;/code&gt; property. The template path is relative to &lt;code&gt;#+TEMPLATE_DIR:&lt;/code&gt;.
&lt;/p&gt;

&lt;/div&gt;&lt;div class="col-sm-4 "&gt;&lt;!-- ("4") --&gt;


&lt;div class="org-src-container"&gt;

&lt;pre class="src src-org"&gt;&lt;span style="color: #DFAF8F;"&gt;* Static page&lt;/span&gt;
,   :PROPERTIES:
,   :PAGE:     path/to/static/page.html
,   :TEMPLATE: static-page.html
,   :END:
&lt;/pre&gt;
&lt;/div&gt;


&lt;/div&gt;&lt;/div&gt;
</content></entry><entry><title type="html">Add a custom font</title><author><name>nil</name></author><link href="http://renard.github.com/o-blog/tips/2012/05/07_add-a-custom-font.html"/><updated>2012-05-07T16:38:00Z</updated><published>2012-05-07T16:38:00Z</published><id>tips/2012/05/07_add-a-custom-font.html</id><category scheme="/tags/usage.html" term="usage" label="usage"/><category scheme="/tags/bootstrap.html" term="Bootstrap" label="Bootstrap"/><category scheme="/tags/o-blog.html" term="o@blog" label="o@blog"/><content type="html">&lt;p&gt;
&lt;a href="http://www.google.com/webfonts"&gt;Google webfonts&lt;/a&gt; can be easily used in o-blog in 2 different ways: using
the Google API, or by providing resources in the &lt;code&gt;templates/style&lt;/code&gt; directory.
&lt;/p&gt;

&lt;div class="alert alert-warning"&gt;&lt;p class="alert-heading"&gt;Caution&lt;/p&gt;

&lt;p&gt;
Using many font styles can slow down your webpage, so only select the font
styles that you actually need on your webpage.
&lt;/p&gt;

&lt;/div&gt;


&lt;p&gt;
Both examples below use the &lt;a href="http://www.yanone.de/typedesign/kaffeesatz/"&gt;Yanone Kaffeesatz&lt;/a&gt; font.
&lt;/p&gt;
&lt;div id="outline-container-sec-1" class="outline-1"&gt;
&lt;h1 id="sec-1"&gt;Using Google API&lt;/h1&gt;
&lt;div class="outline-text-1" id="text-1"&gt;
&lt;p&gt;
The &lt;a href="http://www.google.com/webfonts#QuickUsePlace:quickUse/Family:"&gt;quick use&lt;/a&gt; provides an import snippet such as:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-css"&gt;&lt;span style="color: #DCDCCC; font-weight: bold;"&gt;@import&lt;/span&gt; url(&lt;span style="color: #CC9393;"&gt;"http://fonts.googleapis.com/css?family=Yanone+Kaffeesatz:400,200,300,700&amp;amp;subset=latin,latin-ext"&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
That line should be included into the
&lt;code&gt;templates/style/less/o-blog-default.less&lt;/code&gt; file in which you should also add
something like:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-css"&gt;&lt;span style="color: #93E0E3;"&gt;h1, h2, h3, h4, h5, h6 &lt;/span&gt;{
    &lt;span style="color: #DFAF8F;"&gt;font-family&lt;/span&gt;: &lt;span style="color: #CC9393;"&gt;"Yanone Kaffeesatz"&lt;/span&gt;, sans-serif;
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
And that's it.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-1"&gt;
&lt;h1 id="sec-2"&gt;Providing resources&lt;/h1&gt;
&lt;div class="outline-text-1" id="text-2"&gt;
&lt;p&gt;
That is less efficient in terms of network resources but provides a good
alternative for offline publications.
&lt;/p&gt;


&lt;p&gt;
The script &lt;code&gt;get-font&lt;/code&gt; does all needed jobs.
&lt;/p&gt;

&lt;div class="o-blog-source"&gt;&lt;a class="btn btn-info" data-toggle="modal" data-target="#get-font" &gt;&lt;i class="icon-file icon-white"&gt;&lt;/i&gt;&amp;nbsp;get-font&lt;/a&gt;&lt;/div&gt;&lt;div class="modal fade hide" id="get-font"&gt;&lt;div class="modal-header"&gt;&lt;a class="close" data-dismiss="modal"&gt;&#215;&lt;/a&gt;&lt;h3&gt;get-font&lt;/h3&gt;&lt;/div&gt;&lt;div class="modal-body"&gt;&lt;pre&gt;
&lt;span style="color: #5F7F5F;"&gt;#&lt;/span&gt;&lt;span style="color: #7F9F7F;"&gt;!/bin/&lt;/span&gt;&lt;span style="color: #F0DFAF; font-weight: bold;"&gt;sh&lt;/span&gt;&lt;span style="color: #7F9F7F;"&gt;
&lt;/span&gt;
&lt;span style="color: #F0DFAF; font-weight: bold;"&gt;if &lt;/span&gt;&lt;span style="color: #DCDCCC; font-weight: bold;"&gt;test&lt;/span&gt; -z &lt;span style="color: #CC9393;"&gt;"$1"&lt;/span&gt;; &lt;span style="color: #F0DFAF; font-weight: bold;"&gt;then&lt;/span&gt;
    &lt;span style="color: #DCDCCC; font-weight: bold;"&gt;echo&lt;/span&gt; &lt;span style="color: #CC9393;"&gt;"Usage: $0 font-url"&lt;/span&gt;
    &lt;span style="color: #F0DFAF; font-weight: bold;"&gt;exit&lt;/span&gt; 1
&lt;span style="color: #F0DFAF; font-weight: bold;"&gt;fi&lt;/span&gt;

&lt;span style="color: #DFAF8F;"&gt;FONT_DIR&lt;/span&gt;=templates/style/font
&lt;span style="color: #DFAF8F;"&gt;LESS_DIR&lt;/span&gt;=templates/style/less

&lt;span style="color: #DFAF8F;"&gt;FONT_URL&lt;/span&gt;=&lt;span style="color: #CC9393;"&gt;"$1"&lt;/span&gt;
&lt;span style="color: #DFAF8F;"&gt;LESS_FILE&lt;/span&gt;=$(&lt;span style="color: #DCDCCC; font-weight: bold;"&gt;echo&lt;/span&gt; &lt;span style="color: #CC9393;"&gt;"$FONT_URL"&lt;/span&gt; | sed -n &lt;span style="color: #CC9393;"&gt;'s/.*family=\([^:]\+\).*/\1/p'&lt;/span&gt; | sed &lt;span style="color: #CC9393;"&gt;'s/+/&lt;/span&gt;&lt;span style="color: #DC8CC3; background-color: #3F3F3F;"&gt;-/g')&lt;/span&gt;

&lt;span style="color: #5F7F5F;"&gt;# &lt;/span&gt;&lt;span style="color: #7F9F7F;"&gt;Wee need to provide a valid user agent to get woff fonts
&lt;/span&gt;&lt;span style="color: #DFAF8F;"&gt;UA&lt;/span&gt;=&lt;span style="color: #CC9393;"&gt;'User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.11 (KHTML, like &lt;/span&gt;&lt;span style="color: #DC8CC3; background-color: #3F3F3F;"&gt;Gecko) Chrome/17.0.963.65 Safari/535.11'&lt;/span&gt;


&lt;span style="color: #DFAF8F;"&gt;CSS&lt;/span&gt;=$(curl -H &lt;span style="color: #CC9393;"&gt;"${UA}"&lt;/span&gt; ${&lt;span style="color: #DFAF8F;"&gt;FONT_URL&lt;/span&gt;})

&lt;span style="color: #DCDCCC; font-weight: bold;"&gt;echo&lt;/span&gt; &lt;span style="color: #CC9393;"&gt;"${CSS}"&lt;/span&gt; | sed -n &lt;span style="color: #CC9393;"&gt;"s#.*local('\([^']\+\)'), url('\([^']\+\)').*#curl -o ${F&lt;/span&gt;&lt;span style="color: #DC8CC3; background-color: #3F3F3F;"&gt;ONT_DIR}/\1.woff \2#p" | sh -&lt;/span&gt;

&lt;span style="color: #DCDCCC; font-weight: bold;"&gt;echo&lt;/span&gt; &lt;span style="color: #CC9393;"&gt;"${CSS}"&lt;/span&gt; | sed  &lt;span style="color: #CC9393;"&gt;"s#\(.*\)local('\([^']\+\)'), url('\([^']\+\)')\(.*\)#\1loc&lt;/span&gt;&lt;span style="color: #DC8CC3; background-color: #3F3F3F;"&gt;al('\2'), url('../font/\2.woff')\4#"  &amp;gt; "${LESS_DIR}/font-${LESS_FILE}.less"&lt;/span&gt;

&lt;span style="color: #DCDCCC; font-weight: bold;"&gt;echo&lt;/span&gt; &lt;span style="color: #CC9393;"&gt;"You should add '@import \"font-${LESS_FILE}.less\";' to templates/style/le&lt;/span&gt;&lt;span style="color: #DC8CC3; background-color: #3F3F3F;"&gt;ss/o-blog-default.less"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;
You can run:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-sh"&gt;./get-font &lt;span style="color: #CC9393;"&gt;'http://fonts.googleapis.com/css?family=Yanone+Kaffeesatz:400,200,300&lt;/span&gt;&lt;span style="color: #DC8CC3; background-color: #3F3F3F;"&gt;,700&amp;amp;subset=latin,latin-ext'&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
And add the font declaration in &lt;code&gt;templates/style/less/o-blog-default.less&lt;/code&gt;:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-css"&gt;&lt;span style="color: #DCDCCC; font-weight: bold;"&gt;@import&lt;/span&gt; &lt;span style="color: #CC9393;"&gt;"font-Yanone-Kaffeesatz.less"&lt;/span&gt;;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Finally, declare its use as in the Google API version:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-css"&gt;&lt;span style="color: #93E0E3;"&gt;h1, h2, h3, h4, h5, h6 &lt;/span&gt;{
    &lt;span style="color: #DFAF8F;"&gt;font-family&lt;/span&gt;: &lt;span style="color: #CC9393;"&gt;"Yanone Kaffeesatz"&lt;/span&gt;, sans-serif;
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title type="html">How to use tags</title><author><name>nil</name></author><link href="http://renard.github.com/o-blog/tips/2012/01/07_how-to-use-tags.html"/><updated>2012-01-07T00:28:00Z</updated><published>2012-01-07T00:28:00Z</published><id>tips/2012/01/07_how-to-use-tags.html</id><category scheme="/tags/usage.html" term="usage" label="usage"/><category scheme="/tags/o-blog.html" term="o@blog" label="o@blog"/><content type="html">&lt;p&gt;
Tags are useful to classify o-blog articles/posts (but not for pages).
They are stored as &lt;a href="http://orgmode.org/manual/Tags.html"&gt;Org-mode tags&lt;/a&gt; for each entry. To add or modify a
tag for a post, just use &lt;code&gt;C-c C-c&lt;/code&gt; when on an Org-mode headline, and
enter the tag value.
&lt;/p&gt;

&lt;p&gt;
If an article has more than one tag, separate them by a colon (&lt;code&gt;:&lt;/code&gt;).
&lt;/p&gt;

&lt;p&gt;
Special characters used in tags:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;At sign (&lt;code&gt;@&lt;/code&gt;) is converted to a dash (&lt;code&gt;-&lt;/code&gt;).
&lt;/li&gt;
&lt;li&gt;Underscore (&lt;code&gt;_&lt;/code&gt;) is converted to a blank (&lt;code&gt;&#160;&lt;/code&gt;).
&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><title type="html">Creating a blog</title><author><name>nil</name></author><link href="http://renard.github.com/o-blog/tips/2012/01/07_creating-a-blog.html"/><updated>2012-01-07T00:13:00Z</updated><published>2012-01-07T00:13:00Z</published><id>tips/2012/01/07_creating-a-blog.html</id><category scheme="/tags/usage.html" term="usage" label="usage"/><category scheme="/tags/o-blog.html" term="o@blog" label="o@blog"/><content type="html">&lt;p&gt;
In o-blog, a site is contained in a single Org-mode file specifying
both pages and a blog; in turn, the blog consists of Org-mode entries,
specifically, &lt;a href="http://orgmode.org/manual/TODO-Items.html#TODO-Items"&gt;Org-mode TODO items&lt;/a&gt;. Each entry has a headline/title,
some properties and some text. Exporting a blog means publishing all
the entries of an Org-mode file (to their own HTML5 files) that are
&lt;code&gt;TODO&lt;/code&gt; items marked &lt;code&gt;DONE&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
A minimal o-blog Org-mode file could look like:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-org"&gt;&lt;span style="color: #b3b3b3;"&gt;#+TITLE:&lt;/span&gt; &lt;span style="color: #afeeee; font-weight: bold;"&gt;Lorem ipsum&lt;/span&gt;
&lt;span style="color: #7F9F7F;"&gt;#+DESCRIPTION: dolor sit amet&lt;/span&gt;
&lt;span style="color: #b3b3b3;"&gt;#+DATE:&lt;/span&gt;

&lt;span style="color: #7F9F7F;"&gt;#+STARTUP: logdone&lt;/span&gt;

&lt;span style="color: #7F9F7F;"&gt;#+URL: &lt;a href="http://blog.example.com"&gt;http://blog.example.com&lt;/a&gt;&lt;/span&gt;

&lt;span style="color: #DFAF8F;"&gt;* &lt;/span&gt;&lt;span style="color: #AFD8AF; font-weight: bold;"&gt;DONE&lt;/span&gt;&lt;span style="color: #DFAF8F;"&gt; Lorem ipsum&lt;/span&gt;
,  &lt;span style="color: #7F9F7F;"&gt;CLOSED:&lt;/span&gt; &lt;span style="color: #8CD0D3; text-decoration: underline;"&gt;[2012-01-07 Sat 00:13]&lt;/span&gt;
,  :PROPERTIES:
,  :tags:     Lorem
,  :END:

,  Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Donec hendrerit
,  tempor tellus. Donec pretium posuere tellus. Proin quam nisl, tincidunt
,  et, mattis eget, convallis nec, purus. Cum sociis natoque penatibus et
,  magnis dis parturient montes, nascetur ridiculus mus. Nulla posuere. Donec
,  vitae dolor. Nullam tristique diam non turpis. Cras placerat accumsan
,  nulla. Nullam rutrum. Nam vestibulum accumsan nisl.
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Please note the blank line between the properties section and the text itself.
&lt;/p&gt;

&lt;p&gt;
Use &lt;code&gt;#+STARTUP: logdone&lt;/code&gt; to automatically add a time stamp when closing an
entry.
&lt;/p&gt;
</content></entry>
</feed>
