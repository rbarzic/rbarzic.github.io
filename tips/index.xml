<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>RB's blog</title>
  <link href="http://renard.github.com/o-blogindex.xml" rel="self" />
  <link href="http://renard.github.com/o-blog"/>
  <updated>2015-05-22T16:40:29Z</updated>
  <id>http://renard.github.com/o-blogindex.xml</id>
  <entry><title type="html">Using Flymake with Emacs Arduino mode</title><author><name>nil</name></author><link href="http://renard.github.com/o-blog/blog/2015/05/22_using-flymake-with-emacs-arduino-mode.html"/><updated>2015-05-22T13:47:00Z</updated><published>2015-05-22T13:47:00Z</published><id>blog/2015/05/22_using-flymake-with-emacs-arduino-mode.html</id><content type="html">&lt;p&gt;
I've added some &lt;a href="http://www.emacswiki.org/emacs/FlyMake"&gt;Flymake&lt;/a&gt; support to
&lt;a href="https://github.com/sudar/Arduino-Makefile"&gt;Arduino-Makefile&lt;/a&gt;. It
allows on the fly syntax checking using flymake by calling gcc with
arduino-compatible  options in the background.
&lt;/p&gt;

&lt;p&gt;
The Makefile for the project must be edited to add a check-syntax target :
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-Makefile"&gt;BOARD_TAG    = uno
ARDUINO_LIBS =

include ../../Arduino.mk

check-syntax:
        $(CXX_NAME) -c -include Arduino.h   -x c++ $(CXXFLAGS)   $(CPPFLAGS)  -fsyntax-only $(CHK_SOURCES)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
See &lt;a href="https://github.com/rbarzic/Arduino-Makefile/blob/master/examples/Blink/Makefile"&gt;https://github.com/rbarzic/Arduino-Makefile/blob/master/examples/Blink/Makefile&lt;/a&gt; for a complete example.
&lt;/p&gt;

&lt;p&gt;
Emacs flymake mode must be configured to accept Arduino ino files : 
&lt;/p&gt;

&lt;p&gt;
M-x customize-option RET
flymake-allowed-file-name-masks RET (using auto completion !)
&lt;/p&gt;

&lt;p&gt;
Add the line : 
&lt;/p&gt;

&lt;p&gt;
("\\.ino\\'" flymake-simple-make-init)
&lt;/p&gt;


&lt;p&gt;
Then click on "Apply and Save" button
&lt;/p&gt;

&lt;p&gt;
Then when editing an ino file, turn-on flymake-mode with M-x flymake-mode
&lt;/p&gt;
</content></entry><entry><title type="html">A test post</title><author><name>nil</name></author><link href="http://renard.github.com/o-blog/blog/2014/06/04_a-test-post.html"/><updated>2014-06-04T20:32:00Z</updated><published>2014-06-04T20:32:00Z</published><id>blog/2014/06/04_a-test-post.html</id><content type="html">&lt;p&gt;
This is a test post - to check o-blog bevahiour
&lt;/p&gt;
</content></entry><entry><title type="html">Creating a blog</title><author><name>nil</name></author><link href="http://renard.github.com/o-blog/tips/2012/01/07_creating-a-blog.html"/><updated>2012-01-07T00:13:00Z</updated><published>2012-01-07T00:13:00Z</published><id>tips/2012/01/07_creating-a-blog.html</id><category scheme="/tags/usage.html" term="usage" label="usage"/><category scheme="/tags/o-blog.html" term="o@blog" label="o@blog"/><content type="html">&lt;p&gt;
In o-blog, a site is contained in a single Org-mode file specifying
both pages and a blog; in turn, the blog consists of Org-mode entries,
specifically, &lt;a href="http://orgmode.org/manual/TODO-Items.html#TODO-Items"&gt;Org-mode TODO items&lt;/a&gt;. Each entry has a headline/title,
some properties and some text. Exporting a blog means publishing all
the entries of an Org-mode file (to their own HTML5 files) that are
&lt;code&gt;TODO&lt;/code&gt; items marked &lt;code&gt;DONE&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
A minimal o-blog Org-mode file could look like:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-org"&gt;&lt;span style="color: #b3b3b3;"&gt;#+TITLE:&lt;/span&gt; &lt;span style="color: #afeeee; font-weight: bold;"&gt;Lorem ipsum&lt;/span&gt;
&lt;span style="color: #7F9F7F;"&gt;#+DESCRIPTION: dolor sit amet&lt;/span&gt;
&lt;span style="color: #b3b3b3;"&gt;#+DATE:&lt;/span&gt;

&lt;span style="color: #7F9F7F;"&gt;#+STARTUP: logdone&lt;/span&gt;

&lt;span style="color: #7F9F7F;"&gt;#+URL: &lt;a href="http://blog.example.com"&gt;http://blog.example.com&lt;/a&gt;&lt;/span&gt;

&lt;span style="color: #DFAF8F;"&gt;* &lt;/span&gt;&lt;span style="color: #AFD8AF; font-weight: bold;"&gt;DONE&lt;/span&gt;&lt;span style="color: #DFAF8F;"&gt; Lorem ipsum&lt;/span&gt;
,  &lt;span style="color: #7F9F7F;"&gt;CLOSED:&lt;/span&gt; &lt;span style="color: #8CD0D3; text-decoration: underline;"&gt;[2012-01-07 Sat 00:13]&lt;/span&gt;
,  :PROPERTIES:
,  :tags:     Lorem
,  :END:

,  Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Donec hendrerit
,  tempor tellus. Donec pretium posuere tellus. Proin quam nisl, tincidunt
,  et, mattis eget, convallis nec, purus. Cum sociis natoque penatibus et
,  magnis dis parturient montes, nascetur ridiculus mus. Nulla posuere. Donec
,  vitae dolor. Nullam tristique diam non turpis. Cras placerat accumsan
,  nulla. Nullam rutrum. Nam vestibulum accumsan nisl.
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Please note the blank line between the properties section and the text itself.
&lt;/p&gt;

&lt;p&gt;
Use &lt;code&gt;#+STARTUP: logdone&lt;/code&gt; to automatically add a time stamp when closing an
entry.
&lt;/p&gt;
</content></entry>
</feed>
